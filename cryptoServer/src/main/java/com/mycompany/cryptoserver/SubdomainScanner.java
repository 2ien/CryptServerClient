package com.mycompany.cryptoserver;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.atomic.AtomicBoolean;

import io.netty.buffer.Unpooled;
import io.netty.channel.ChannelHandlerContext;

public class SubdomainScanner {

    // ‚úÖ Cho ph√©p d·ª´ng t·ª´ b√™n ngo√†i (v√≠ d·ª• Netty Handler)
    public static final AtomicBoolean shouldStopScan = new AtomicBoolean(false);

    public static void scan(String domain, String wordlistPath, ChannelHandlerContext ctx) throws IOException {
        shouldStopScan.set(false); // reset tr∆∞·ªõc khi b·∫Øt ƒë·∫ßu qu√©t

        InputStream inputStream = SubdomainScanner.class.getClassLoader().getResourceAsStream(wordlistPath);
        if (inputStream == null) {
            throw new IOException("Kh√¥ng t√¨m th·∫•y wordlist trong resources: " + wordlistPath);
        }

        BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream));
        List<String> found = new ArrayList<>();

        String line;
        int lineNumber = 1;

        while ((line = reader.readLine()) != null) {
            if (shouldStopScan.get()) {
                ctx.writeAndFlush(Unpooled.copiedBuffer("\n‚èπÔ∏è ƒê√£ d·ª´ng qu√©t theo y√™u c·∫ßu ng∆∞·ªùi d√πng.\n", StandardCharsets.UTF_8));
                
                // In c√°c subdomain ƒë√£ t√¨m th·∫•y
                if (!found.isEmpty()) {
                    ctx.writeAndFlush(Unpooled.copiedBuffer("üìã K·∫øt qu·∫£ t·∫°m th·ªùi tr∆∞·ªõc khi d·ª´ng:\n", StandardCharsets.UTF_8));
                    for (String entry : found) {
                        ctx.writeAndFlush(Unpooled.copiedBuffer("- " + entry + "\n", StandardCharsets.UTF_8));
                    }
                } else {
                    ctx.writeAndFlush(Unpooled.copiedBuffer("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y subdomain h·ª£p l·ªá tr∆∞·ªõc khi d·ª´ng.\n", StandardCharsets.UTF_8));
                }
                return; // d·ª´ng h·∫≥n
            }

            String sub = line.trim();
            if (sub.isEmpty()) {
                lineNumber++;
                continue;
            }

            String fqdn = sub + "." + domain;
            String statusLine = String.format("[%06d] üîé ƒêang ki·ªÉm tra: %s\n", lineNumber, fqdn);
            ctx.writeAndFlush(Unpooled.copiedBuffer(statusLine, StandardCharsets.UTF_8));

            try {
                InetAddress address = InetAddress.getByName(fqdn);
                String resolved = fqdn + " -> " + address.getHostAddress();
                String resultLine = String.format("[%06d] ‚úÖ T√¨m th·∫•y: %s\n", lineNumber, resolved);

                ctx.writeAndFlush(Unpooled.copiedBuffer(resultLine, StandardCharsets.UTF_8));
                found.add(String.format("[%06d] %s", lineNumber, resolved));
            } catch (UnknownHostException ignored) {
                // Kh√¥ng hi·ªÉn th·ªã n·∫øu kh√¥ng resolve ƒë∆∞·ª£c
            }

            lineNumber++;
        }

        // ‚úÖ N·∫øu ch·∫°y ƒë·∫øn h·∫øt wordlist
        ctx.writeAndFlush(Unpooled.copiedBuffer("\n‚úÖ Qu√©t ho√†n t·∫•t!\n", StandardCharsets.UTF_8));

        if (!found.isEmpty()) {
            ctx.writeAndFlush(Unpooled.copiedBuffer("üìã T·ªïng h·ª£p subdomain h·ª£p l·ªá:\n", StandardCharsets.UTF_8));
            for (String entry : found) {
                ctx.writeAndFlush(Unpooled.copiedBuffer("- " + entry + "\n", StandardCharsets.UTF_8));
            }
        } else {
            ctx.writeAndFlush(Unpooled.copiedBuffer("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y subdomain h·ª£p l·ªá.\n", StandardCharsets.UTF_8));
        }


    }
}
